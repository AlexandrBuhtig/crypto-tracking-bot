import requests
from telegram import Bot
import time
import os
import logging

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")  # –£—Å—Ç–∞–Ω–æ–≤–∏ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Render
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –∏ –∏—Ö —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
coins = {
    "fet": {"target_buy": 1.00, "stop_loss": 0.70},
    "link": {"target_buy": 20.00, "stop_loss": 15.00},
    "scrt": {"target_buy": 0.30, "stop_loss": 0.21},
    "avax": {"target_buy": 30.00, "stop_loss": 22.00}
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –º–æ–Ω–µ—Ç—ã
def get_coin_price(coin_id):
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={coin_id}&vs_currencies=usd"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        if coin_id in data:
            return data[coin_id]["usd"]
        else:
            logging.warning(f"[!] Coin '{coin_id}' not found in API response.")
            return None
    except Exception as e:
        logging.error(f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {coin_id}: {e}")
        return None

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def send_message(message):
    try:
        bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)
        logging.info(f"[INFO] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    except Exception as e:
        logging.error(f"[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram] {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
def track_prices():
    while True:
        for coin_id, levels in coins.items():
            price = get_coin_price(coin_id)
            if price is None:
                continue
            if price >= levels["target_buy"]:
                send_message(f"üìà {coin_id.upper()} –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏ ‚Äî ${price:.2f}. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å.")
            elif price <= levels["stop_loss"]:
                send_message(f"üìâ {coin_id.upper()} –Ω–∏–∂–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ ‚Äî ${price:.2f}. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–¥–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é.")
            else:
                logging.info(f"{coin_id.upper()}: ${price:.2f} ‚Äî –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã.")
        time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

if __name__ == "__main__":
    send_message("ü§ñ –ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∑–∞–ø—É—â–µ–Ω.")
    track_prices()
